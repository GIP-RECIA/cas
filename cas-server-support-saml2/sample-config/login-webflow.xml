<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow
                          http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">
    
    <var name="credentials" class="org.jasig.cas.authentication.principal.UsernamePasswordCredentials" />
	
    <action-state id="initializeFlow">
        <evaluate expression="initialFlowSetupAction" />
        <evaluate expression="initMultiDomainAction">
        	<attribute name="name" value="initFinished" />
        </evaluate>
        <transition on="initFinished.success" to="checkSamlResponse" />
	</action-state>

	<action-state id="checkSamlResponse">
	  	<evaluate expression="saml20EmailAuthenticationAction" />
	  	<transition on="success" to="sendTicketGrantingTicket" />
	  	<transition on="error" to="ticketGrantingTicketExistsCheck" />
	</action-state>

	<decision-state id="ticketGrantingTicketExistsCheck">
		<if test="flowScope.ticketGrantingTicketId != null" then="hasServiceCheck" else="gatewayRequestCheck" />
	</decision-state>
    
	<decision-state id="gatewayRequestCheck">
		<if test="requestParameters.gateway != '' and requestParameters.gateway != null and flowScope.service != null" then="gatewayServicesManagementCheck" else="generateLoginTicket" />
	</decision-state>

	<decision-state id="hasServiceCheck">
		<if test="flowScope.service != null" then="renewRequestCheck" else="viewGenericLoginSuccess" />
	</decision-state>

	<decision-state id="renewRequestCheck">
		<if test="requestParameters.renew != '' and requestParameters.renew != null" then="generateLoginTicket" else="accountActivationCheck" />
	</decision-state>

	<!-- 
		The "warn" action makes the determination of whether to redirect directly to the requested
		service or display the "confirmation" page to go back to the server.
	-->
	<decision-state id="warn">
		<if test="flowScope.warnCookieValue" then="showWarningView" else="redirect" />
	</decision-state>

	<!-- 
	<action-state id="startAuthenticate">
		<action bean="x509Check" />
		<transition on="success" to="sendTicketGrantingTicket" />
		<transition on="warn" to="warn" />
		<transition on="error" to="generateLoginTicket" />
	</action-state>
	 -->
   
   	<action-state id="generateLoginTicket">        
		<!-- MBD: ajout du check redirect to index -->
        <evaluate expression="indexRedirectByTokenAction" />
        <evaluate expression="generateLoginTicketAction.generate(flowRequestContext)" />
        
        <!-- MBD: Yes the redirection is needed -->
        <transition on="redirectionNeeded" to="redirectToUrl" />
		<transition on="success" to="idpAlreadySelectedCheck" />
	</action-state>
	
	<!-- MBD: Preselected IdP check -->
	<decision-state id="idpAlreadySelectedCheck">
		<if test="requestParameters.idpId != null" then="redirectToIdp" else="viewWayf" />
	</decision-state>
	    
    <!-- MBD: WAYF View -->
	<view-state id="viewWayf" view="wayfView">
        <on-entry>
        	<evaluate expression="initWayfAction" />
        	<evaluate result="viewScope.idpsLogoutUrl" expression="saml20SingleLogoutController.getIdpsLogoutUrl()" />
            <set name="viewScope.commandName" value="'wayf'" />
            <set name="viewScope.wayfConfig" value="wayfConfiguration" />
            <set name="viewScope.samlCreds" value="flowScope.samlCredentials" />
        </on-entry>
		<transition on="submit" bind="true" validate="true" to="redirectToIdp" />
	</view-state>
	
	<!-- MBD: WAYF Redirection to IdP -->
    <action-state id="redirectToIdp">        
		<evaluate expression="wayfRedirectionAction" />
		
		<transition on="samlRedirect" to="redirectToUrl" />
		<transition on="samlPost" to="postSamlRequest" />
		<transition on="error" to="viewWayf" />
		<transition on="casIdp" to="viewLoginForm" />
	</action-state>
	
	<view-state id="postSamlRequest" view="casSamlPostRedirectView">
        <on-entry>
        	<set name="viewScope.paramEntries" value="flowScope.paramEntries" />
        	<set name="viewScope.idpEndpointUrl" value="flowScope.authnRequestData.endpointUrl" />
         </on-entry>
	</view-state>
	
    <view-state id="viewLoginForm" view="casLoginView" model="credentials">
        <binder>
            <binding property="username" />
            <binding property="password" />
        </binder>
        <on-entry>
            <set name="viewScope.commandName" value="'credentials'" />
            <set name="viewScope.currentDomainName" value="flowScope.currentDomainName" />
        </on-entry>
		<transition on="submit" bind="true" validate="true" to="realSubmit">
            <evaluate expression="authenticationViaFormAction.doBind(flowRequestContext, flowScope.credentials)" />
        </transition>
	</view-state>

	<action-state id="realSubmit">
        <evaluate expression="authenticationViaFormAction.submit(flowRequestContext, flowScope.credentials, messageContext)" />
		<transition on="warn" to="warn" />
		<transition on="success" to="sendTicketGrantingTicket" />
		<transition on="error" to="generateLoginTicket" />
	</action-state>

	<action-state id="sendTicketGrantingTicket">
        <evaluate expression="sendTicketGrantingTicketAction" />
		<transition to="accountActivationCheck" />
	</action-state>

	<decision-state id="accountActivationCheck">
		<!-- MBD: modif : Check prÃ©alable de l'activation du compte & redirection eventuelle pour activation du compte-->
		<if test="accountStateFacade.isInactiveAccount(flowRequestContext)" then="redirectToUrl" else="serviceCheck" />
	</decision-state>
	
	<decision-state id="serviceCheck">
		<if test="flowScope.service != null" then="generateServiceTicket" else="viewGenericLoginSuccess" />
	</decision-state>

	<action-state id="generateServiceTicket">
		<!-- MBD: modif : remplacement de "generateServiceTicketAction" par "generateMultiDomainServiceTicketAction" -->
        <evaluate expression="generateMultiDomainServiceTicketAction" />
		<transition on="success" to ="warn" />
		<transition on="error" to="generateLoginTicket" />
		<transition on="gateway" to="gatewayServicesManagementCheck" />
	</action-state>

    <action-state id="gatewayServicesManagementCheck">
        <evaluate expression="gatewayServicesManagementCheck" />
        <transition on="success" to="redirect" />
    </action-state>

    <action-state id="redirect">
        <evaluate expression="flowScope.service.getResponse(requestScope.serviceTicketId)" result-type="org.jasig.cas.authentication.principal.Response" result="requestScope.response" />
        <transition to="postRedirectDecision" />
    </action-state>

    <decision-state id="postRedirectDecision">
        <if test="requestScope.response.responseType.name() == 'POST'" then="postView" else="redirectView" />
    </decision-state>

	<!-- 
		the "viewGenericLogin" is the end state for when a user attempts to login without coming directly from a service.
		They have only initialized their single-sign on session.
	-->
	<end-state id="viewGenericLoginSuccess" view="casLoginGenericSuccessView" />

	<!-- 
		The "showWarningView" end state is the end state for when the user has requested privacy settings (to be "warned") to be turned on.  It delegates to a 
		view defines in default_views.properties that display the "Please click here to go to the service." message.
	-->
	<end-state id="showWarningView" view="casLoginConfirmView" />

    <end-state id="postView" view="postResponseView">
        <on-entry>
            <set name="requestScope.parameters" value="requestScope.response.attributes" />
            <set name="requestScope.originalUrl" value="flowScope.service.id" />
        </on-entry>
    </end-state>

	<!-- 
		The "redirect" end state allows CAS to properly end the workflow while still redirecting
		the user back to the service required.
	-->
	<end-state id="redirectView" view="externalRedirect:${requestScope.response.url}" />

	<!-- MBD: redirect -->
	<end-state id="redirectToUrl" view="externalRedirect:${flowScope.urlToRedirect}" />

	<end-state id="viewServiceErrorView" view="viewServiceErrorView" />
    
    <end-state id="viewServiceSsoErrorView" view="viewServiceSsoErrorView" />

	<global-transitions>
        <!-- CAS-1023 This one is simple - redirects to a login page (same as renew) when 'ssoEnabled' flag is unchecked
             instead of showing an intermediate unauthorized view with a link to login page -->
        <transition to="viewWayf" on-exception="org.jasig.cas.services.UnauthorizedSsoServiceException"/>
        <transition to="viewServiceErrorView" on-exception="org.springframework.webflow.execution.repository.NoSuchFlowExecutionException" />
		<transition to="viewServiceErrorView" on-exception="org.jasig.cas.services.UnauthorizedServiceException" />
	</global-transitions>
</flow>